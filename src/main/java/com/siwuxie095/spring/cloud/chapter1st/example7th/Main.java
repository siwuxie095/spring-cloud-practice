package com.siwuxie095.spring.cloud.chapter1st.example7th;

/**
 * @author Jiajing Li
 * @date 2021-05-09 22:37:13
 */
public class Main {

    /**
     * 云究竟是什么
     *
     * 术语 "云" 已经被过度使用。每个软件供应商通过大肆宣传，宣称都提供云，每个平台都是基于云计算的。
     * 云计算中存在三种基本模型，它们是：
     * （1）Infrastructure as a Service（IaaS）：基础设施即服务
     * （2）Platform as a Service（PaaS）：平台即服务
     * （3）Software as a Service（SaaS）：软件即服务
     *
     * 为了更好地理解这些概念，下面把每天做饭的任务映射到不同的云计算模型。
     *
     * 当你想要吃一顿饭，你有四个选择：
     * （1）自行管理（On premise）：你可以在家做饭。
     * （2）基础设施即服务（IaaS）：你可以去杂货店（便利店）买预先做好的饭，你自己加热。
     * （3）平台即服务（PaaS）：你可以通过外卖订一份送到家里的饭。
     * （4）软件即服务（SaaS）：你可以乘车到餐馆吃饭。
     *
     * 这些选项的不同之处在于谁负责做饭和在哪里做饭。在先决条件模式下，在家吃一餐需要你做所有的工作，
     * 用你自己的烤箱和家里的配料。买饭就像使用基础设施即服务（IaaS）计算模型。 你正在使用商店的厨
     * 师和烤箱来烘烤这顿饭，但你仍然负责加热饭菜，然后在家里吃（然后洗碗）。
     *
     * 在平台即服务（PaaS）的模型，你仍然负责做饭，但是你更多的是依赖于供应商的服务来完成不做饭相
     * 关联的核心任务。例如，在 PaaS 模式，你提供盘子和家具，餐厅老板提供烤箱，配料和烹饪厨师。
     *
     * 在软件即服务（SaaS）模式中，就好比你去一家餐馆，他们为你准备所有的食物。你在餐厅吃饭，然后
     * 你吃完之后买单。你无需准备或清洗餐具。
     *
     * 使用这些模型的关键因素是以下内容的决策：谁负责维护基础设施？以及构建应用程序用什么技术？在
     * IaaS 模型，云供应商提供的基础设施，但你负责选择技术和提供最终解决方案。另一方面，使用 SaaS
     * 模型，你是供应商提供的服务的被动使用者，对技术选择或维护应用程序的基础设施没有任何责任。
     *
     * PS：新兴的云平台
     *
     * 有据可查，目前正在使用的有三个核心云平台类型（IaaS、PaaS、SaaS）。然而，新的云平台类型不断
     * 涌现。这些新的平台包括功能即服务（FaaS）和容器即服务（CaaS）。Amazon 的 Lambda 技术和
     * Google 云功能构建无需服务器（Serverless）就可部署的代码块使用的技术都是基于 FaaS 应用，
     * 它们完全运行在提供商的云计算平台中。使用 FaaS 平台，你不必管理任何服务器基础设施，只需为执
     * 行该功能（函数）所需的计算周期付费。你不必管理任何服务器基础设施，只需支付执行该功能（函数）
     * 所需的计算周期。
     *
     * FaaS 也作 函数即服务，可参考：https://en.wikipedia.org/wiki/Function_as_a_Service
     *
     * 在容器即服务（CaaS）模型，开发者可以将他们的微服务放到云提供商的轻便虚拟容器（如 Docker）
     * 中进行构建和部署。不像 IaaS 模型，你的开发人员需要考虑将虚拟机部署到那里。使用 CaaS，你在
     * 一个轻量级的虚拟容器中部署你的服务。云提供商运行容器的虚拟服务器上运行用于构建、部署、监视
     * 和伸缩容器的各种工具。Amazon 的弹性容器服务（ECS）就是一个基于 CaaS 平台的例子。
     *
     * 需要注意的是，了解云计算的 FaaS 和 CaaS 模型的重要性，你才能继续构建基于微服务的架构。牢
     * 记，围绕微服务概念构建微小的、单一职责的服务，使用基于 HTTP 的接口与其通信。新型的云计算
     * 平台，如 FaaS 和 CaaS，是基础设施部署微服务的替代机制。
     */
    public static void main(String[] args) {

    }

}
