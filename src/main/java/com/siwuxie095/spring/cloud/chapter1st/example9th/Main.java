package com.siwuxie095.spring.cloud.chapter1st.example9th;

/**
 * @author Jiajing Li
 * @date 2021-05-11 22:20:40
 */
public class Main {

    /**
     * 微服务不只是编写代码
     *
     * 尽管构建单个微服务的概念很易于理解，但运行和支持健壮的微服务应用程序（尤其是在云中运行）不只是涉及为服务编写代码。
     * 编写健壮的服务需要考虑如下几个主题。
     * （1）大小适当：如何确保服务专注于一个职责领域？
     * （2）位置透明：如何管理物理位置，以便在不影响服务客户端的情况下添加和删除服务实例？
     * （3）有弹性：服务出现问题时，如何确保服务客户端 "快速失败"？
     * （4）可重复：如何确保每次启动新服务实例时，新服务实例始终具有与现有实例相同的代码和配置？
     * （5）可伸缩：如何确保应用程序能够以最小的服务间依赖关系快速伸缩？
     *
     * PS：微服务不只是业务逻辑，还需要考虑服务的运行环境以及服务的伸缩性和弹性。
     *
     * 下面来更详细地了解一下这几个主题的要点。
     * （1）大小适当：如何确保正确地划分微服务的大小，以避免微服务承担太多的职责？请记住，适当的大小允许
     * 快速更改应用程序，并降低整个应用程序中断的总体风险。
     * （2）位置透明：在微服务应用程序中，多个服务实例可以快速启动和关闭时，如何管理服务调用的物理细节？
     * （3）有弹性：如何通过绕过失败的服务，确保采取 "快速失败" 的方法来保护微服务消费者和应用程序的整
     * 体完整性？
     * （4）可重复：如何确保提供的每个新服务实例与生产环境中的所有其他服务实例具有相同的配置和代码库？
     * （5）可伸缩：如何使用异步处理和事件来最小化服务之间的直接依赖关系，并确保可以优雅地扩展微服务？
     *
     * 这里采用基于模式的方法来回答这些问题。通过基于模式的方法，这里列出了可以跨不同技术实现来使用的通用设计。虽然这里
     * 选择了使用 Spring Boot 和 Spring Cloud 来实现这里所使用的模式，但开发人员完全可以把这些概念和其他技术平台一
     * 起使用。具体来说，涵盖了以下六类微服务模式：
     * （1）微服务核心开发模式；
     * （2）微服务路由模式；
     * （3）微服务客户端弹性模式；
     * （4）微服务安全模式；
     * （5）微服务日志记录和跟踪模式；
     * （6）微服务构建和部署模式。
     *
     * 下面来深入了解一下这些模式。
     *
     *
     *
     * 1、微服务核心开发模式
     *
     * 微服务核心开发模式解决了构建微服务的基础问题，突出了将要讨论的基本服务设计的主题。如下所示。
     * （1）服务粒度：服务应该具有那些职责级别？
     * （2）通信协议：客户端和服务如何实现数据的来回通信？
     * （3）接口设计：如何将服务端点公开给客户端？
     * （4）配置管理：服务如何管理应用程序的特定配置，以便代码和配置成为独立的实体？
     * （5）事件处理：如何使用事件来传达服务之间的状态和数据变更？
     *
     * PS：在设计微服务时必须考虑服务是如何通信以及被消费的。
     *
     * 下面针对这几个主题做进一步的阐释。
     * （1）服务粒度：如何将业务域分解为微服务，使每个微服务都具有适当程度的职责？服务职责划分过于粗粒度，
     * 在不同的业务问题领域重叠，会使服务随着时间的推移变得难以维护。服务职责划分过于细粒度，则会使应用
     * 程序的整体复杂性增加，并将服务变为无逻辑的（除了访问数据存储所需的逻辑）"哑" 数据抽象层。
     * （2）通信协议：开发人员如何与服务进行通信？使用 XML（Extensible Markup Language，可扩展标记
     * 语言）、JSON（JavaScript 对象表示法）或诸如 Thrift 之类的二进制协议来与微服务传输数据？这里将
     * 介绍为什么 JSON 是微服务的理想选择，并且 JSON 已成为向微服务发送和接收数据的最常见选择。
     * （3）接口设计：如何设计实际的服务接口，便于开发人员进行服务调用？如何构建服务 URL 来传达服务意图？
     * 如何版本化服务？精心设计的微服务接口使服务变得更直观。
     * （4）服务的配置管理：如何管理微服务的配置，以便在不同云环境之间移动时，不必更改核心应用程序代码或
     * 配置？
     * （5）服务之间的事件处理：如何使用事件解耦微服务，以便最小化服务之间的硬编码依赖关系，并提高应用程
     * 序的弹性？
     *
     *
     *
     * 2、微服务路由模式
     *
     * 微服务路由模式负责处理希望消费微服务的客户端应用程序，使客户端应用程序发现服务的位置并路由到服务。在基于云的应用
     * 程序中，可能会运行成百上千个微服务实例。需要抽象这些服务的物理 IP 地址，并为服务调用提供单个入口点，以便为所有
     * 服务调用持续强制执行安全和内容策略。
     *
     * 服务发现和路由回答了这个问题：如何将客户的服务请求发送到服务的特定实例？
     * （1）服务发现：如何使微服务变得可以被发现，以便客户端应用程序在不需要将服务的位置硬编码到应用程序
     * 的情况下找到它们？如何确保从可用的服务实例池中删除表现不佳的微服务实例？
     * （2）服务路由：如何为所有服务提供单个入口点，以便将安全策略和路由规则统一应用于微服务应用程序中的
     * 多个服务和服务实例？如何确保团队中的每位开发人员不必为他们的服务提供自己的服务路由解决方案？
     *
     * 服务发现和服务路由之间不具有硬编码的事件顺序（如：首先是服务路由，然后是服务发现），这两种模式并不彼此依赖。例如，
     * 可以实现没有服务路由的服务发现，也可以实现服务路由而无需服务发现（尽管这种实现更加困难）。
     *
     *
     * PS：服务发现和路由是所有大规模微服务应用的关键部分
     * （1）服务路由为微服务客户端提供了单一的逻辑 URL 来进行通信，并作为授权、验证和内容检查等
     * 内容的策略实施点。
     * （2）服务发现从客户端抽象出服务的物理位置。可以添加新的微服务实例来进行扩大，并且可以透明
     * 地从服务中删除不健康的服务实例。
     *
     *
     *
     * 3、微服务客户端弹性模式
     *
     * 因为微服务架构是高度分布式的，所以必须对如何防止单个服务（或服务实例）中的问题级联暴露给服务的消费者十分敏感。为
     * 此，这里将介绍四种客户端弹性模式。
     * （1）客户端负载均衡：如何在服务客户端上缓存服务实例的位置，以便对微服务的多个实例的调用负载均衡到
     * 该微服务的所有健康实例？
     * （2）断路器模式：如何阻止客户继续调用出现故障的或遭遇性能问题的服务？如果服务运行缓慢，客户端调用
     * 时会消耗它的资源。开发人员希望出现故障的微服务调用能够快速失败，以便主叫客户端可以快速响应并采取
     * 适当的措施。
     * （3）后备模式：当服务调用失败时，如何提供 "插件" 机制，允许服务的客户端尝试通过调用微服务之外的
     * 其他方法来执行工作？
     * （4）舱壁模式：微服务应用程序使用多个分布式资源来执行工作。如何区分这些调用，以便表现不佳的服务调
     * 用不会对应用程序的其他部分产生负面影响？
     *
     * PS：断路器 即 熔断，后备 即 降级，舱壁 即 隔板。
     *
     * 如下展示了这些模式如何在服务表现不佳时，保护服务消费者不受影响。
     * （1）客户端负载均衡：服务客户端缓存了从服务发现检索到的微服务端点，并确保服务调用在实例之间进行负
     * 载均衡。
     * （2）断路器：断路器模式确保服务客户端不会重复调用出现故障服务，而是采取 "快速失败" 来保护客户端？
     * （3）后备：在客户端失败时，客户端能否采用另一种方法来检索数据或采取行动？
     * （4）舱壁：如何在客户端上隔离不同的服务调用，以确保表现不佳的服务不占用客户端上的所有资源？
     *
     * PS：使用微服务时，必须保护服务调用者远离表现不佳的服务。记住，慢速或无响应的服务所造成的中断并不
     * 仅仅局限于直接关联的服务。
     *
     *
     *
     * 4、微服务安全模式
     *
     * 谈微服务绕不开微服务安全性。这里将介绍三种基本的安全模式。具体如下：
     * （1）验证：如何确定调用服务的客户端就是它们声称的那个主体？
     * （2）授权：如何确定调用微服务的客户端是否允许执行它们正在进行的操作？
     * （3）凭据管理和传播：如何避免客户端每次都要提供凭据信息才能访问事务中涉及的服务调用？具体来说，
     * 这里将介绍如何使用基于令牌的安全标准来获取可以从一个服务调用传递到另一个服务调用的令牌，以验证
     * 和授权用户，这里涉及的标准包括 OAuth2 和 JSON Web Token（JWT）。
     *
     * 如下展示了如何实现上述三种模式来构建可以保护微服务的验证服务。
     * （1）首先有一个想要保护的服务，作为受保护的资源。
     * （2）资源所有者授权哪些应用程序或用户可以通过验证服务来访问资源。
     * （3）在用户试图访问受保护的服务时，他们必须从验证服务进行身份验证并获取一个令牌。
     * （4）令牌服务器对用户进行验证并确认提供给它的令牌。
     *
     * PS：使用基于令牌的安全方案，可以实现服务验证和授权，而无需传递客户端凭据。
     *
     *
     *
     * 5、微服务日志记录和跟踪模式
     *
     * 微服务架构的优点是单体应用程序被分解成可以彼此独立部署的小的功能部件，而它的缺点是调试和跟踪应用程序和服务中发生
     * 的事情要困难得多。因此，这里将介绍以下三种核心日志记录和跟踪模式。
     * （1）日志关联：一个用户事务会调用多个服务，如何将这些服务所生成的日志关联到一起？借助这种模式，
     * 这里将会介绍如何实现一个关联（correlation）ID，这是一个唯一的标识符，在事务中调用所有服务都
     * 会携带它，通过它能够将每个服务生成的日志条目联系起来。
     * （2）日志聚合：借助这种模式，这里将会介绍如何将微服务（及其各个实例）生成的所有日志合并到一个
     * 可查询的数据库中。此外，这里还会研究如何使用关联 ID 来协助搜索聚合日志。
     * （3）微服务跟踪：最后，这里将探讨如何在涉及的所有服务中可视化客户端事务的流程，并了解事务所涉
     * 及的服务的性能特征。
     *
     * 如下展示了这些模式如何配合在一起。
     * （1）日志关联：所有服务日志条目都具有将日志条目与事务相关联的关联 ID。
     * （2）日志聚合：聚合机制从所有服务实例中收集所有日志。当数据进入中心数据存储时，它被索引并存储
     * 为可搜索的格式。
     * （3）微服务事务跟踪：开发和运维团队可以查询日志数据来查找单个事务，还能够可视化事务中涉及的所
     * 有服务的流程。
     *
     * PS：一个深思熟虑的日志记录和跟踪策略使跨多个服务的调试事务变得可管理。
     *
     *
     *
     * 6、微服务构建和部署模式
     *
     * 微服务架构的核心原则之一是，微服务的每个实例都应该和其他所有实例相同。"配置漂移"（某些文件在部署到服务器之后发生
     * 了一些变化）是不允许出现的，因为这可能会导致应用程序不稳定。
     *
     * 为此，这里的目标是将基础设施的配置集成到构建部署过程中，这样就不再需要将软件制品（如 Java WAR 或 EAR）部署到已
     * 经在运行的基础设施中。相反，开发人员希望在构建过程中构建和编译微服务并准备运行微服务的虚拟服务器镜像。部署微服务
     * 时，服务器运行所需的整个机器镜像都会进行部署。
     *
     * 如下阐述了这个过程。
     * （1）一切都从开发人员签入代码到源代码管理存储库开始。这是启动构建/部署过程的触发器。
     * （2）基础设施即代码：构建代码并运行微服务测试。这里也将基础设施视为代码。微服务被
     * 编译和打包时，立即制作和提供安装带有微服务的虚拟服务器或容器镜像。
     * （3）不可变服务器：镜像被制作和部署完成后，不允许开发人员或系统管理员对服务器进行
     * 修改。在环境之间进行升级时，整个容器或镜像将以服务器首次启动时传递给服务器的环境
     * 特定变量启动。
     * （4）凤凰服务器：作为持续集成过程的一部分，实际的服务器会被不断地卸载，新的服务器
     * 也会启动和卸载，这极大地减少了环境之间发生配置漂移的机会。
     *
     * PS：开发人员希望微服务及其运行所需的服务器成为在不同环境间作为整体部署的原子制件。
     *
     * 总的来说，这里将介绍以下模式和主题。
     * （1）构建和部署管道：如何创建一个可重复的构建和部署过程，只需一键即可构建和部署到组织中的任何环境？
     * （2）基础设施即代码：如何将服务的基础设施作为可在源代码管理下执行和管理的代码去对待？
     * （3）不可变服务器：一旦创建了微服务镜像，如何确保它在部署之后永远不会更改？
     * （4）凤凰服务器：服务器运行的时间越长，就越容易发生配置漂移。如何确保运行微服务的服务器定期被拆卸，
     * 并重新创建一个不可变的镜像？
     *
     * 使用这些模式和主题的目的是：
     *
     * 在配置漂移影响到上层环境（如交付准备环境或生产环境）之前，尽可能快地公开并消除配置漂移。
     */
    public static void main(String[] args) {

    }

}
