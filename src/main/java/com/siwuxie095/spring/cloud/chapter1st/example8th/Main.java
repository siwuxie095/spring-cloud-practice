package com.siwuxie095.spring.cloud.chapter1st.example8th;

/**
 * @author Jiajing Li
 * @date 2021-05-11 08:13:03
 */
public class Main {

    /**
     * 为什么是云和微服务
     *
     * 微服务架构的核心概念之一就是每个服务都被打包和部署为离散的独立制品。服务实例应该迅速启动，服务的
     * 每一个实例都是完全相同的。
     *
     * 作为编写微服务的开发人员，迟早要决定是否将服务部署到下列某个环境之中。
     * （1）物理服务器：虽然可以构建和部署微服务到物理机器，但由于物理服务器的局限性，很少有组织
     * 会这样做。开发人员不能快速提高物理服务器的容量，并且在多个物理服务器之间水平伸缩微服务可能
     * 会变得成本非常高。
     * （2）虚拟机镜像：微服务的主要优点之一是能够快速启动和关闭微服务实例，以响应可伸缩性和服务
     * 故障事件。虚拟机是主要云供应商的心脏和灵魂。微服务可以打包在虚拟机镜像中，然后开发人员可以
     * 在 Iaa S私有或公有云中快速部署和启动服务的多个实例。
     * （3）虚拟容器：虚拟容器是在虚拟机镜像上部署微服务的自然延伸。许多开发人员不是将服务部署到
     * 完整的虚拟机，而是将 Docker 容器（或等效的容器技术）部署到云端。虚拟容器在虚拟机内运行。
     * 使用虚拟容器，可以将单个虚拟机隔离成共享相同虚拟机镜像的一系列独立进程。
     *
     * 基于云的微服务的优势是以弹性的概念为中心。云服务供应商允许开发人员在几分钟内快速启动新的虚拟机和
     * 容器。如果服务容量需求下降，开发人员可以关闭虚拟服务器，而不会产生任何额外的费用。使用云供应商部
     * 署微服务可以显著地提高应用程序的水平可伸缩性（添加更多的服务器和服务实例）。服务器弹性也意味着应
     * 用程序可以更具弹性。如果其中一台微服务遇到问题并且处理能力正在不断地下降，那么启动新的服务实例可
     * 以让应用程序保持足够长的存活时间，让开发团队能够从容而优雅地解决问题。
     *
     * 这里会使用 Docker 容器将所有的微服务和相应的服务基础设施部署到基于 IaaS 的云供应商。下面列出的
     * 是用于微服务的常见部署拓扑结构。
     * （1）简化的基础设施管理：IaaS 云计算供应商可以让开发人员最有效地控制他们的服务。开发人员
     * 可以通过简单的 API 调用来启动和停止新服务。使用 IaaS 云解决方案，只需支付使用基础设施的
     * 费用。
     * （2）大规模的水平可伸缩性：IaaS 云服务供应商允许开发人员快速简便地启动服务的一个或多个实
     * 例。这种功能意味着可以快速扩大服务以及绕过表现不佳或出现故障的服务器。
     * （3）通过地理分布实现高冗余：IaaS 供应商必然拥有多个数据中心。通过使用 IaaS 云供应商部
     * 署微服务，可以比使用数据中心里的集群拥有更高级别的冗余。
     *
     * 这里构建的服务都会打包为 Docker 容器。这里选择 Docker 的原因之一是，作为容器技术，Docker 可
     * 以部署到所有主要的云供应商之中。后续将演示如何使用 Docker 打包微服务，然后将这些容器部署到亚马
     * 逊云平台。
     *
     *
     * PS：为什么不是基于 PaaS 的微服务
     *
     * 之前讨论了三种云平台（基础设施即服务、平台即服务和软件即服务）。这里选择专注于使用基于
     * IaaS 的方法构建微服务。虽然某些云供应商可以让开发人员抽象出微服务的部署基础设施，但这
     * 里选择保持独立于供应商并部署应用程序的所有部分（包括服务器）。
     *
     * 例如，亚马逊、Cloud Foundry 和 Heroku 可以让开发人员无需知道底层应用程序容器即可部
     * 署服务。它们提供了一个 Web 接口和 API，以允许将应用程序部署为 WAR 或 JAR 文件。设
     * 置和调优应用程序服务器和相应的 Java 容器被抽象了出来。虽然这很方便，但每个云供应商的
     * 平台与其各自的 PaaS 解决方案有着不同的特点。
     *
     * IaaS 方案虽然需要更多的工作，但可跨多个云供应商进行移植，并允许开发人员通过产品覆盖更
     * 广泛的受众。而且这里发现基于 PaaS 的云解决方案可以快速启动开发工作，但一旦应用程序拥
     * 有足够多的微服务，开发人员就会开始需要云服务商提供的 IaaS 风格的灵活性。
     *
     * 之前前面提到过新的云计算平台，如函数即服务（FaaS）和容器即服务（CaaS）。如果不小心，
     * 基于 FaaS 的平台就会将代码锁定到一个云供应商平台上，因为代码会被部署到供应商特定的
     * 运行时引擎上。使用基于 FaaS 的模型，开发人员可能会使用通用的编程语言（Java、Python、
     * JavaScript 等）编写服务，但开发人员仍然会将自己严格束缚在底层供应商的 API 和部署
     * 函数的运行时引擎上。
     */
    public static void main(String[] args) {

    }

}
