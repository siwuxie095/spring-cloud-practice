package com.siwuxie095.spring.cloud.chapter1st.example8th;

/**
 * @author Jiajing Li
 * @date 2021-05-11 08:13:03
 */
public class Main {

    /**
     * 为什么是云和微服务
     *
     * 基于微服务架构的核心概念之一是每个服务都作为独立的组件被打包和部署。服务实例应该能够快速启动。
     * 服务的每个实例之间互不干扰，都应该与其他实例区分开来。
     *
     * 作为一位微服务的开发者，你将不得不决定是否将你的服务部署到以下的环境中：
     * （1）物理服务器：虽然你可以构建和部署你的微服务到物理机，但很少有机构这样做是因为物理服务器
     * 有限制。你不能快速提升一台物理服务器的处理能力。在多台物理服务器上水平伸缩你的微服务是非常
     * 昂贵的。
     * （2）虚拟机镜像：微服务一个关键的好处是它们具有快速启动和关闭服务实例以响应应用伸缩和服务故
     * 障事件处理的能力。虚拟机是主要的云计算提供商提供的核心服务。一个微服务可以被打包在一个虚拟机
     * 镜像。在任何一个 IaaS 私有云或公有云，服务的多个实例可以快速部署和启动。
     * （3）虚拟容器：虚拟容器是在虚拟机镜像里部署微服务的自然延伸。与其将一个服务部署到一台完整的
     * 虚拟机，许多开发者将他们的服务部署到云上的 Docker 容器（或者等效的容器技术）。虚拟容器运行
     * 在一台虚拟机内部；使用虚拟容器，你可以将单个虚拟机分隔成一系列独立的、共享相同的虚拟机镜像
     * 的进程。
     *
     * 基于云的微服务的优势是围绕弹性的概念。云服务提供商能够为你提供在几分钟内快速地生成新的虚拟机
     * 和容器的能力。如果你的服务需求下降，你可以在不产生任何额外成本的情况下向下收缩虚拟服务器的数
     * 量。使用云提供商的设施部署你的微服务能够提高你应用横向扩展的能力（增加更多的服务器和服务实例）。
     * 服务器的伸缩性也意味着你的应用程序可以更具弹性。如果你的一个微服务有问题甚至宕机，生成新的服
     * 务实例，可以让你的应用程序处于更长的活动状态，使你的开发团队能够很好的解决问题。
     *
     * 在这里，所有的微服务和相应服务的基础设施将被部署到一个基于 IaaS 云提供商提供的 Docker 容器。
     * 这里选择 Docker 作为一个容器技术，其中的一个原因是 Docker 能够被部署到所有主要的云计算提供
     * 商。
     *
     * 微服务传统的部署哲学：
     * （1）简化基础设施管理：IaaS 云提供商给你提供对服务最大的控制能力。使用简单的 API 调用，新的
     * 服务可以启动和停止。一个 IaaS 云解决方案，你只需为你使用的基础设施付费。
     * （2）大规模的横向扩展能力：IaaS 云提供商能够让你快速地启动一个服务的一个或多个实例。这种能力
     * 意味着你可以快速伸缩服务和绕过有问题或已宕机的服务器。
     * （3）通过地理分布实现高冗余：根据需要，IaaS 供应商有多个数据中心。通过使用 IaaS 云提供商部
     * 署你的微服务，你能获得一个比在数据中心中使用集群更高级别的冗余。
     *
     *
     * PS：为什么不是基于 PaaS 的微服务
     *
     * 之前讨论了三种类型的云平台（基础设施即服务、平台即服务和软件即服务）。在这里，选择特别关注使用
     * 基于 IaaS 的方法构建微服务。尽管某些云供应商会让你远离部署微服务的基础设施，但这里选择保持独
     * 立于供应商，并亲自部署应用程序及相关资源（包括服务器）。
     *
     * 例如，Amazon, Cloud Foundry 和 Heroku 为你提供了不必知道底层应用程序容器就能部署服务的能
     * 力。它们提供了 Web 接口和 API，允许你将应用程序部署为 WAR 或 JAR 文件。你不需要设置和调整
     * 应用程序服务器和对应的 Java 容器。虽然这样很方便，但每个云服务提供商的平台有不同的特性，这与
     * 个别的 PaaS 解决方案相关。
     *
     * IaaS 的方式，尽管需要做更多的工作，但可以跨多个云提供商，让这里的资料适应更广泛的读者。就个人
     * 而言，基于 PaaS 的解决方案将能够让你很快的开始你的开发工作，但是一旦你的应用达到足够的微服务，
     * 你开始需要云提供商提供灵活的 IaaS 方式。
     *
     * 之前还提到了一些新兴的云计算平台，如:功能即服务（FaaS）和容器即服务（CaaS）。如果你不小心，
     * 使用 FaaS 平台方式会将代码绑定到云供应商平台中，因为你的代码被部署到特定供应商的运行时引擎。
     * 使用基于 FaaS 的模型，你可以使用通用编程语言编写你的服务（Java、Python，JavaScript 等等），
     * 但你在一定程度上仍然将潜在供应商的 API 和程序部署的运行时环境绑定在一起。
     */
    public static void main(String[] args) {

    }

}
