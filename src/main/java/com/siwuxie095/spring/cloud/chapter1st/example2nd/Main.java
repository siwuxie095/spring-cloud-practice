package com.siwuxie095.spring.cloud.chapter1st.example2nd;

/**
 * @author Jiajing Li
 * @date 2021-05-07 08:14:05
 */
public class Main {

    /**
     * 什么是微服务
     *
     * 在微服务概念形成之前，大多数基于 Web 的应用程序都是使用单一的体系结构风格构建的。在单体架构中，
     * 应用程序作为一个可部署的软件工件交付。所有的 UI（用户界面）、 业务逻辑和数据库访问逻辑，被一起
     * 打包成一个单一的应用程序，并部署到应用服务器。
     *
     * 虽然应用程序可能是作为单个工作单元部署的，但大多数情况下将有多个开发团队在应用程序上工作。每一
     * 个开发团队都有他们自己的独立应用程序，并且他们经常用他们的功能部件来服务特定的客户。例如，在一
     * 家大型金融服务公司工作时，有一个内部定制的客户关系管理（CRM）应用程序，它涉及多个团队的协调，
     * 包括 UI、客户经理、数据仓库和共同基金团队。
     *
     * 单体应用程序迫使多个开发团队人为地同步交付，因为它们的代码需要作为整个单元来构建、测试和部署。
     *
     * 每个团队都有自己的工作要求和交货要求。所有的资源都同步到一个单一的代码库（独立的源代码仓库）。
     * 通过持续集成管道，构建典型的基于 Spring 的 Web 应用程序，整个应用程序了解和访问其内部使用的
     * 所有数据源。
     *
     * 这里的问题是，随着单体 CRM 应用觃模和复杂性的增长，在应用程序上工作的各个团队的交流和协调成本
     * 将无法控制。每当个别团队做出一点变动，整个应用程序必须被重新构建、重新测试和重新部署。
     *
     * 2014 年左右，微服务概念被引入到软件开发社区。它得到了许多试图在技术上和规模上挑战单体应用的大
     * 型组织的直接响应。微服务是一个小的、松散耦合的分布式服务。微服务允许你将一个大型的应用程序分解
     * 成易于管理和职责明确的组件。微服务通过将大型代码分解成小的、定义明确的块，帮助应对复杂性的传统
     * 问题。你需要接受一个关键概念：微服务可以将应用程序的功能分解和分拆，它们是完全独立的。
     *
     * 可以把上面的 CRM 应用分解为微服务。使用微服务架构，CRM 应用将被分解成一系列完全相互独立的微服
     * 务，让每个开发团队根据自己的要求管理和维护。
     *
     * 每个功能团队完全拥有他们的服务代码和服务基础设施。它们可以独立地构建、部署和测试，因为它们的代
     * 码、源代码版本控制仓库和基础设施（应用服务器和数据库）完全独立于应用程序的其他部分。
     *
     * 微服务架极具有以下特点：
     * （1）应用逻辑被分解为小粒度的、责任界限明确的组件。
     * （2）每个组件都有一个小的责任域，并且完全独立部署。微服务应该有一个业务领域的单一职责。同时，
     * 微服务应该跨多个应用程序可重用。
     * （3）微服务通信基于几个基本原则（注意这里说的是原则，没有标准）和采用轻量级的通信协议如 HTTP
     * 和 JSON（JavaScript Object Notation）为服务消费者和服务提供者之间提供数据交换。
     * （4）服务的底层实现与技术无关，因为应用程序总是与技术无关的协议通信（JSON 是最常见的）。这意味
     * 着使用微服务构建应程序，可以用多种语言和技术。
     * （5）微服务具有小的、独立的、天然分布式的特点。允许企业拥有规模小、责任明确的开发团队。这些团队
     * 可能会朝着一个单一的目标，如发布一个应用程序，但是每个团队之负责与该服务相关的工作。
     *
     * 开玩笑的说，微服务是构建云应用的入门药物。你开始创建微服务，因为它们为你的开发团队提供高度的灵
     * 活性和自主性，但是你和你的团队很快会发现微服务体积小、天然独立的特点，使得它们更易于部署到云。
     * 一旦服务被部署在云上，体积小使得它们易于启动大量相同服务的实例，使应用程序变得更具可扩展性，前
     * 瞻性和弹性。
     *
     * PS：这里的入门药物 即 gateway drug，即 入门毒品，理解为入门级即可。
     */
    public static void main(String[] args) {

    }

}
