package com.siwuxie095.spring.cloud.chapter1st.example6th;

/**
 * @author Jiajing Li
 * @date 2021-05-09 21:53:55
 */
public class Main {

    /**
     * 为什么要改变构建应用程序的方式
     *
     * 现在正处在历史的转折点。现代社会的各个方面，通过互联网连接在一起。曾经为当地市场服务的公司突然发现他们
     * 可以接触到全球客户群。然而，一个更大的全球客户群也伴随着全球竞争。这些竞争压力意味着以下因素影响开发人
     * 员必须考虑构建应用程序的方式：
     * （1）日益增加的复杂性：客户期望他们能够了解一个组织的所有部分。仅访问一个数据库、孤立的应用程序，不与
     * 其他应用程序集成不再是常态。当前的应用程序需要访问不只在公司数据中心内的多个服务和数据库，而且还要访问
     * 互联网上的提供商提供的外部服务。
     * （2）客户希望更快的发布：客户不再希望等待下一个软件包的年度发布或版本。相反，他们希望将一个软件产品的
     * 功能分解开来，使新的功能可以在一星期（甚至几天）迅速发布而无需等待一个完整的产品发布。
     * （3）性能和可伸缩性：单体应用很难预测当交易量高峰期的时候应用程序能够处理多少交易量。应用程序需要能够
     * 跨多个服务器快速扩展，然后在需求量已经过去时缩小规模。
     * （4）客户希望他们的应用程序是可用的：因为如果客户想比竞争者更成功，公司的应用程序就必须具有高度的弹性。
     * 应用程序某一部分的故障或问题不应导致整个应用程序失败。
     *
     * 为了满足这些期望，作为应用程序开发人员，不得不接受这样一个悖论：为了构建高可伸缩性和高度冗余的应用程序，
     * 需要将应用程序分解成可以独立构建和部署的小型服务。如果将单体应用程序拆分成小服务，能够使系统具有以下特性：
     * （1）灵活的：解耦的服务可以重新快速提供新的功能。使用的代码单元越小，更改代码的时间越少，测试部署代码所
     * 需的时间就越少。
     * （2）有弹性的：解耦服务意味着应用程序不再是单一的 "泥球"，其中应用程序的某一部分的恶化导致整个应用程序
     * 失败。故障可以定位到应用程序的一小部分，并在整个应用程序经历中断以前得到控制。这也使得应用程序能够完全
     * 降低发生不可恢复错误的几率。
     * （3）可扩展的：解耦的服务可以很容易地跨多个服务器水平分布，从而可以适当地扩展功能/服务。在一个单体应用
     * 程序中，应用程序的所有逻辑相互交织在一起，整个应用程序若需要扩展，哪怕只是很小的一部分，都将成为应用的
     * 瓶颈。
     *
     * 为此，开始微服务的讨论，请牢记以下的内容：
     * 小的、简单的、解耦的服务 = 可扩展的、有弹性的、灵活的应用
     */
    public static void main(String[] args) {

    }

}
