package com.siwuxie095.spring.cloud.chapter1st.example6th;

/**
 * @author Jiajing Li
 * @date 2021-05-09 21:53:55
 */
public class Main {

    /**
     * 为什么要改变构建应用的方式
     *
     * 现在正处于历史的拐点。现代社会的几乎所有方面都可以通过互联网连接在一起。习惯于为当地市场服务的公司突然发现，
     * 他们可以接触到全球的客户群，全球更大的客户群一起涌进来的同时也带来了全球竞争。这些竞争压力意味着以下力量正
     * 在影响开发人员考虑构建应用程序的方式。
     * （1）复杂性上升：客户期望组织的所有部门都知道他们是谁。与单个数据库通信并且不与其他应用程序集成的 "孤立的"
     * 应用程序已不再是常态。如今，应用程序不仅需要与多个位于公司数据中心内的服务和数据库进行通信，还需要通过互联
     * 网与外部服务提供商的服务和数据库进行通信。
     * （2）客户期待更快速的交付：客户不再希望等待软件包的下一次年度发布或整体版本更新。相反，他们期望软件产品中
     * 的功能被拆分，以便在几周（甚至几天）内即可快速发布新功能，而无需等待整个产品发布。
     * （3）性能和可伸缩性：全球性的应用程序使预测应用程序将处理多少事务量以及何时触发该事务量变得非常困难。应用
     * 程序需要快速跨多个服务器进行扩大，然后在事务量高峰过去时进行收缩。
     * （4）客户期望他们的应用程序可用：因为客户与竞争对手之间只有点击一下鼠标的距离，所以企业的应用程序必须具有
     * 高度的弹性。应用程序中某个部分的故障或问题不应该导致整个应用程序崩溃。
     *
     * 为了满足这些期望，作为应用开发人员，不得不接受这样一个悖论：构建高可伸缩性和高度冗余的应用程序。需要将应用
     * 程序分解成可以互相独立构建和部署的小型服务。如果将应用程序 "分解" 为小型服务，并将它们从单体制品中转移出来，
     * 那么就可以构建具有下面这些特性的系统。
     * （1）灵活性：可以将解耦的服务进行组合和重新安排，以快速交付新的功能。一个正在使用的代码单元越小，更改代码
     * 越不复杂，测试部署代码所需的时间越短。
     * （2）有弹性：解耦的服务意味着应用程序不再是单个 "泥浆球"，在这种架构中其中一部分应用程序的降级会导致整个
     * 应用程序失败。故障可以限制在应用程序的一小部分之中，并在整个应用程序遇到中断之前被控制。这也使应用程序在
     * 出现不可恢复的错误的情况下能够优雅地降级。
     * （3）可伸缩性：解耦的服务可以轻松地跨多个服务器进行水平分布，从而可以适当地对功能/服务进行伸缩。单体应用
     * 程序中的所有逻辑是交织在一起的，即使只有一小部分应用程序是瓶颈，整个应用程序也需要扩展。小型服务的扩展是
     * 局部的，成本效益更高。
     *
     * 为此，当开始讨论微服务时，请记住下面一句话：
     *
     * 小型的、简单的和解耦的服务 = 可伸缩的、有弹性的和灵活的应用程序
     */
    public static void main(String[] args) {

    }

}
