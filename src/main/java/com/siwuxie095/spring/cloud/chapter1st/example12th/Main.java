package com.siwuxie095.spring.cloud.chapter1st.example12th;

/**
 * @author Jiajing Li
 * @date 2021-05-14 21:43:34
 */
public class Main {

    /**
     * 确保示例是有意义的
     *
     * 为了确保这里提供的示例都是与开发人员的工作息息相关的，这里将围绕一家名为 ThoughtMechanix 的虚构公司
     * 的冒险（不幸事件）来组织对应的代码示例。
     *
     * ThoughtMechanix 是一家软件开发公司，其核心产品 EagleEye 提供企业级软件资产管理应用程序。该产品覆盖
     * 了所有关键要素：库存、软件交付、许可证管理、合规、成本以及资源管理。其主要目标是使组织获得准确时间点的
     * 软件资产的描述。
     *
     * 该公司成立了大概 10 年，尽管营收增长强劲，但在内部，他们正在讨论是否应该革新其核心产品，将它从一个单体
     * 内部部署的应用程序转移到云端。对该公司来说，与 EagleEye 相关的平台革新是 "生死" 时刻。
     *
     * 该公司正在考虑在新架构上重构其核心产品 EagleEye。虽然应用程序的大部分业务逻辑将保持原样，但应用程序本
     * 身将从单体设计中分解为更小的微服务设计，其部件可以独立部署到云端。
     *
     * 这里的示例不会构建整个 ThoughtMechanix 应用程序。相反，你将从问题领域构建特定的微服务，然后使用各种
     * Spring Cloud（和一些非 Spring Cloud）技术来构建支持这些服务的基础设施。
     *
     * 成功采用基于云的微服务架构的能力将影响技术组织的所有成员。这包括架构团队、工程团队、测试团队和运维团队。
     * 每个团队都需要投入，最终，当团队重新评估他们在这个新环境中的职责时，他们可能需要重组。
     *
     * 伴随着 ThoughtMechanix 的旅程，你将开始一些基础工作 —— 识别和构建 EagleEye 中使用的几个微服务，然
     * 后使用 Spring Boot 构建这些服务。
     */
    public static void main(String[] args) {

    }

}
