package com.siwuxie095.spring.cloud.chapter1st.example12th;

/**
 * @author Jiajing Li
 * @date 2021-05-14 21:43:34
 */
public class Main {

    /**
     * 了解与开发者相关的例子
     *
     * 为了确保这里提供的例子，可以与你的日常工作联系起来。为此，这里的代码示例，围绕一家称为 ThoughtMechanix
     * 的虚构公司的奇遇（不幸的冒险）。
     *
     * ThoughtMechanix 是一家软件开发公司，他的核心产品 EagleEye，提供一个企业级的软件资产管理应用。它提供了
     * 所有关键元素的覆盖：库存、软件交付、许可证管理、合规性、成本和资源管理。它的主要目标是使组织能够准确地了解
     * 其软件资产的时间点。
     *
     * 这家公司大约有 10 年历史。虽然他们已经经历了可靠的收入增长，它们内部正在讨论是否应将核心产品从单一的基于
     * 本地的应用重新平台化，或迁移到云应用。对于一家公司，涉及 EagleEye 的平台重新调整将是一个影响 "成败" 的
     * 关键时刻。
     *
     * 该公司是在一个新的架构重建其核心产品 EagleEye。而对于应用程序的业务逻辑大多会保留，应用本身将被分解，从
     * 整体设计拆分成更小的微服务设计，它们每一部分都可以独立部署到云。这里的例子将不会建立整个 ThoughtMechanix
     * 应用。相反，你会从手头的问题域构建具体的微服务，并建立基础设施来支持这些服务使用各种各样的 Spring Cloud
     * 技术。
     *
     * 成功地采用基于云的能力，微服务架构将影响技术组织的所有部分。这包括架构、工程、测试和运营团队。每一组的投入
     * 都是必要的，在最后，他们可能需要重组团队来重新评估在这个新的环境中他们的责任。
     */
    public static void main(String[] args) {

    }

}
