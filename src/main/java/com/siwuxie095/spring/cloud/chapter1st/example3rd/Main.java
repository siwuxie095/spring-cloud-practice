package com.siwuxie095.spring.cloud.chapter1st.example3rd;

/**
 * @author Jiajing Li
 * @date 2021-05-07 21:20:18
 */
public class Main {

    /**
     * 什么是 Spring，它和微服务有什么关联
     *
     * Spring 已经成为构建基于 Java 应用程序事实上的开发框架。Spring 的核心是基于依赖注入的概念。在一个
     * 正常的 Java 应用里，应用被分解成各种各样的类。每个类经常被应用里其他的类明确的链接。链接就是一个类
     * 的构造函数中在其他类的代码中被直接调用。一旦代码被编译，这些链接点是不能改变的。
     *
     * 这在一个大型项目中是有问题的，因为这些外部链接是脆弱的，进行更改会导致其他代码的多个下游受到影响。
     * 依赖注入框架，如 Spring，让你通过在应用程序里使用约定（注解）定义外部对象之间的关系，更方便的管理
     * 大型的 Java 项目，而不是在对象里硬编码对象之间的引用。在应用程序里不同的 java 类之间，Spring 作
     * 为中介管理它们的依赖。Spring 本质上是让你能像扣合一套在一起的乐高积木一样，组装你的代码。
     *
     * Spring 框架具有使人快速上手的优势，它迅速成为企业级应用 Java 开发人员寻找替代使用 J2EE 技术栈构
     * 建应用的一种更轻量级的方式。J2EE 技术栈，虽然很强大，但是被许多人认为太臃肿了，有很多功能，并没有
     * 被应用开发团队使用。特别是，J2EE 应用强制要求你使用重量级的 Java 应用服务器进行应用程序的部署。
     *
     * Spring 框架令人惊奇的是，它的社区生态能够持续収展并坚持自身。Spring 开发团队很快发现许多开发团队
     * 正在摒弃单体应用程序，这些应用程序的展示、业务和数据访问逻辑被打包在一起，作为单个工件部署。相反，
     * 他们正在转移到高度分布式的模型中，这些服务能够构建为可以轻松部署到云上的小型分布式服务。作为回应，
     * Spring 开发团队推出了两个项目：Spring Boot 和 Spring Cloud。
     *
     * Spring Boot 是重新构想的 Spring 框架。然而它包含了 Spring 的核心特征，Spring Boot 剥离了
     * Spring 里面许多的 "企业级" 特性，提供了一个基于 Java，面向 REST（表述性状态转移）微服务的框架。
     * 使用简单的注解，一个 Java 开发者就可以快速创建一个 REST 微服务，它可以被打包和部署而不需要外部
     * 的应用程序容器。
     *
     * 注意：后续将详细地认论 REST，它的核心概念是你的服务应该使用 HTTP 谓词（GET、POST、PUT 和
     * DELETE）来表示服务的核心操作，并使用面向 Web 的轻量级数据序列化协议（如 JSON）来请求和接收
     * 来自服务的数据。可参考 Roy Fielding 博士关于构建基于 REST 应用程序的博士论文，它仍然是目前
     * 能找到的关于 REST 的最好说明。链接如下：
     * https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm
     *
     * 因为微服务已经成为构建基于云的应用程序的更常见的架构模式之一，Spring 社区为开发者提供了 Spring
     * Cloud。Spring Cloud 框架使得将微服务部署到私有云或公有云变得更简单。Spring Cloud 把几种流行
     * 的云管理微服务框架整合到共同的框架下，在代码里使用注解使得这些技术的使用和部署变得更容易。
     */
    public static void main(String[] args) {

    }

}
