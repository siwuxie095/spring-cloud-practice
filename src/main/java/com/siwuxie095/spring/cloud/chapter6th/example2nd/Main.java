package com.siwuxie095.spring.cloud.chapter6th.example2nd;

/**
 * @author Jiajing Li
 * @date 2021-06-08 08:29:19
 */
public class Main {

    /**
     * 服务网关
     *
     * 之前你已经构建了微服务，并通过 Web 客户端直接调用单独的服务或通过服务发现引擎的编程方式调用
     * 它们，如 Eureka。
     *
     * 没有服务网关，服务客户端将为每个服务调用不同的端点。当服务客户端直接调用服务时，如果不让每个
     * 服务直接在服务中实现此逻辑（如安全性或日志记录），就无法轻松地实现横切关注点。
     *
     * 服务网关充当服务客户端和正在调用的服务之间的中介。服务客户端只对由服务网关管理的单个 URL 进
     * 行访问。服务网关将从服务客户端调用中提取分离出来的路径，并确定服务客户端试图调用的服务。服务
     * 网关像一个交通警察指挥交通，直接将用户路由到目标微服务和相应的实例。服务网关充当在应用程序中
     * 所有到达微服务调用的守门人。有了服务网关，你的服务客户端不会直接调用单个服务的 URL，而是将
     * 所有调用都放置到服务网关。
     *
     * PS：服务网关位于服务客户端和相应的服务实例之间。所有服务调用（内部和外部）都应该流经服务网关：
     * （1）客户端通过调用服务网关调用服务。
     * （2）服务网关将被调用的 URL 分离，并将路径映射到服务网关后面的服务。
     *
     * 由亍服务网关位于从客户端到各个服务的所有调用之间，它也充当服务调用的中央策略执行点（PEP）。
     * 使用集中式 PEP 意味着横切服务关注点可以在一个地方实现，而不需要单个开发团队实现这些关注点。
     * 可以在服务网关中实现的横切关注点示例包括：
     * （1）静态路由：服务网关将所有服务调用放在一个 URL 和 API 路由后面。这简化了开发，因为开发
     * 人员只需要知道所有服务的一个服务端点。
     * （2）动态路由：服务网关可以检查传入的服务请求，并根据来自传入请求的数据，执行基于服务调用者
     * 的智能路由。例如，参与 beta 测试程序的客户可能对所有路由到特定服务集群的服务进行调用，这些
     * 服务组正在运行与其他人使用的不同版本的代码。
     * （3）认证和授权：由于所有服务调用都通过服务网关路由，因此服务网关是检查服务调用方是否已进行
     * 身份验证并授权进行服务调用的一个自然场所。
     * （4）度量收集和日志记录：当服务调用通过服务网关时，服务网关可用于收集度量和日志信息。你还可
     * 以使用服务网关来确保用户请求上的关键信息已经到位，以确保日志记录是一致的。这并不意味着你不
     * 应该还从单个服务中收集度量标准，而是服务网关允许你集中收集许多基本度量，例如服务调用的次数
     * 和服务响应时间。
     *
     * 后续将介绍如何使用 Spring Cloud 和 Netflix Zuul 实现服务网关。
     *
     *
     * PS：等等，服务网关不是一个单一的故障点和潜在的瓶颈吗？
     *
     * 之前介绍 Eureka 时，谈到了集中负载均衡器如何成为你服务的一个单一的故障点和瓶颈。如果服务网关
     * 没有正确实现，它可能承担同样的风险。在构建服务网关实现时，请记住以下几点。
     * （1）负载均衡器在一组单独的服务前面时，仍然是有用的。在这种情况下，位于多个服务网关实例前面的
     * 负载均衡器是一个适当的设计，并确保服务网关可以实现伸缩。在所有服务实例前面都有一个负载均衡器，
     * 这不是一个好主意，因为它成为瓶颈。
     * （2）保持为服务网关编写的所有代码都是无状态的。不要将任何信息存储在服务网关的内存中。如果你不
     * 注意，你将限制网关的可伸缩性，并必须确保在所有服务网关实例中复制数据。
     * （3）保持为服务网关编写的代码是轻量级的。服务网关是你的服务调用的 "瓶颈"。具有多个数据库调用
     * 的复杂代码可能是跟踪服务网关性能问题的根源。
     */
    public static void main(String[] args) {

    }

}
