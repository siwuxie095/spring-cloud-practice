package com.siwuxie095.spring.cloud.chapter6th.example1st;

/**
 * @author Jiajing Li
 * @date 2021-06-07 21:25:01
 */
public class Main {

    /**
     * 使用 Spring Cloud 和 Zuul 进行服务路由
     *
     * 在一个像微服务的分布式架构，你需要确保关键行为，如：安全，日志记录和跟踪用户跨多个服务调用的发生。
     * 为了实现此功能，你希望这些属性在所有的服务中得到一致地执行，而不需要每个开发团队构建自己的解决方
     * 案。虽然可以使用公共库或框架来帮助在单个服务中直接构建这些能力，但这样做有三个含义。
     *
     * 首先，要在正在构建的每个服务中始终如一地实现这些能力是很困难的。开发人员专注于交付功能，在日常活
     * 动的旋风中，他们很容易忘记实现服务日志记录或跟踪。不幸的是，对于那些在监管很严的行业，如金融服务
     * 业或医疗保健公司，在你的系统中显示一致和记录的行为常常是遵守政府规章的关键要求。
     *
     * 其次，正确实现这些能力是一个挑战。像微服务安全建立和为每个服务实现配置一定是件痛苦的事情。把像安
     * 全这样的横切关注点实现责任推到个人开发团队，这会大大增加一个人没有正确执行或忘记执行它的几率。
     *
     * 最后，现在你已经在所有服务上创建了一个硬依赖项。在跨所有服务共享的公共框架中构建的功能越多，在不
     * 必重新编译和重新部署你的所有服务的情况下更改或添加公共代码的行为就越困难。在你的应用中你有 6 个
     * 微服务，这可能似乎不是什么大不了的，但它是一个大问题，当你有大量的服务，也许是 30 个或更多的。
     * 突然，构建到共享库中的核心能力的升级就变成了一个长达数月的迁移过程。
     *
     * 为了解决这个问题，你需要抽象这些横切关注点为服务，该服务能独立作为应用程序里所有的微服务调用的过
     * 滤器和路由器。这种横切关注点称为服务网关。你的服务客户端不再直接调用服务。相反，所有调用都通过服
     * 务网关路由，该网关充当一个单一的策略执行点（PEP），然后路由到最终目的地。
     *
     * 在这里，将看到如何使用 Spring Cloud 和 Netflix 的 Zuul 实现服务网关。Zuul 是 Netflix 的开
     * 源服务网关的实现。具体来说，来看看如何使用 Spring Cloud 和 Zuul 来：
     * （1）将所有服务调用放在一个 URL 后面，并使用服务发现将这些调用映射到实际的服务实例中。
     * （2）将关联 ID 注入到通过服务网关的每个服务调用中。
     * （3）从客户端发回的 HTTP 响应中注入关联 ID。
     * （4）构建一个动态路由机制，将特定的单个组织路由到与其他人使用不同的服务实例端点。
     */
    public static void main(String[] args) {

    }

}
