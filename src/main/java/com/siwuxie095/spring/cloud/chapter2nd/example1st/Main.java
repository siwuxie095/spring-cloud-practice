package com.siwuxie095.spring.cloud.chapter2nd.example1st;

/**
 * @author Jiajing Li
 * @date 2021-05-15 20:50:58
 */
public class Main {

    /**
     * 使用 Spring Boot 构建微服务
     *
     * 软件开发的历史上充斥着大量开发项目的故事，这些项目是在投入了数百万美元和数十万软件开发人员的时间之后
     * 进行的，和许多业内最优秀和最聪明的人一起工作，不知何故，他们从来没有设法向顾客提供任何有价值的东西，
     * 而且在他们自己的复杂性和重任下崩溃了。
     *
     * 这些庞大的项目往往遵循大型传统的瀑布开发方法，坚持在项目开始时定义所有应用程序的需求和设计。太多的重
     * 点放在了让所有规格的软件是 "正确" 的，而没有什么余地来满足新的业务需求，或重构和学习在发展的初期阶段
     * 犯过的错误。
     *
     * 然而，实际情况是软件开发不是定义和执行的线性过程，而是一个渐进的过程，在开发团队真正了解手头的问题之
     * 前，需要经过几次反复的交流、学习和交付给客户。
     *
     * 结合使用传统瀑布方法的挑战是很多次在这些项目中交付的软件产品的粒度：
     * （1）紧耦合：这大大增加了即使应用程序组件进行小的更改也可能破坏应用程序的其他部分并引入新 bug 的机会。
     * （2）泄漏：大多数大型软件应用程序管理不同类型的数据。例如，客户关系管理（CRM）应用程序可以管理客户、
     * 销售和产品信息。在传统模型中，这些数据保存在同一个数据模型中，并且存储在同一个数据存储中。尽管数据之间
     * 有明显的界限，但通常来自一个域的团队很容易直接访问属于另一个团队的数据。
     * 这种易于访问的数据创建了隐藏的依赖关系，并允许一个组件的内部数据结构的实现细节泄漏到整个应用程序中。即
     * 使对单个数据库表进行小的更改也可能需要在整个应用程序中有大量代码更改和回归测试。
     * （3）单体/庞大：因为一个传统的应用程序的大多数应用程序组件存在于一个单一的代码库，在多个团队之间分享，
     * 任何时间更改代码，整个程序必须重新编译，通过整个测试周期重新运行，并重新部署。即使是对应用程序代码库的
     * 小改动，不管是新的客户需求还是 bug 修复，都会变得昂贵和耗时，而且大的更改几乎是不可能及时完成的。
     *
     * 一个微服务架构采用了不同的方法来提供功能。具体来说，微服务架构有以下特性：
     * （1）有限的：微服务单一职责、范围有限。微服务拥抱 Unix 哲学：一个应用只不过是一个服务集合，每个服务做
     * 一件事，并且一件事情做得很好。
     * （2）松耦合：一个微服务应用就是一个小服务的集合，仅仅通过使用非专有的调用协议（例如，HTTP 和 REST），
     * 不执行特定的接口相互作用。只要服务不改变接口，微服务的拥有者有比在传统的应用架构更多的自由来对服务进行
     * 修改。
     * （3）分离的：微服务完全拥有自己的数据结构和数据来源。微服务数据只能通过对应的微服务修改。对数据库的访
     * 问控制使微服务的数据被锁定，仅允许这个服务访问它。
     * （4）独立的：在微服务应用程序中的每个微服务，可以独立于应用程序中的其他服务被编译和部署。这意味着与更
     * 为相互依赖的整体应用程序相比，更改可以更容易地隔离和测试。
     *
     * 为什么这些微服务架构属性对基于云计算的开发是重要的？基于云的应用程序一般有以下几个特点：
     * （1）庞大多样的用户群：不同的客户需要不同的特性，并且在开始使用这些特性之前，他们不需要等待长的应用程
     * 序发布周期。微服务允许功能很快交付，因为每个服务是小范围的，通过定义明确的接口访问。
     * （2）极高的正常运行时间要求：因为微服务的分散性，微服务应用可以更容易地隔离应用程序的特定部分的故障和
     * 问题，而不必删除整个应用程序。这降低了整体应用的停机时间，使它们提升了抵御故障的能力。
     * （3）不均匀的大量需求：随着时间的推移出现，在四面都是墙的企业数据中心部署的传统应用程序通常具有一致的
     * 使用模式。这使得这些类型的应用程序的容量规划变得简单。但在一个基于云的应用程序，在 Twitter 的一个简
     * 单鸣叫或者是在 Slashdot 上张贴消息，都可以从最高限度驱动云应用需求。
     *
     * 因为微服务应用程序被分解成小的组件，可以独立于其它的组件被部署，将重点放在组件的负载和在云中多台服务器
     * 上横向伸缩要容易得多。
     *
     * 这里为你提供了实现目标所需的基础，在你的业务问题中识别微服务，建立一个微服务骨架，然后理解微服务在生产
     * 上被成功部署和管理所需的操作属性。
     *
     * 为了成功地设计和构建微服务，你需要像一个警察询问犯罪嫌疑人一样着手处理微服务。尽管每个证人都目睹了同样
     * 的事件发生，但他们对犯罪的解释是由他们的背景、对他们很重要的东西（例如，是什么诱发他们）形成的，以及在
     * 目睹事件发生的那一刻，施加了什么环境压力。参与者对自己认为重要的事物都有自己的观点和偏见。
     *
     * 像一个成功的警察试图获得真相，要构建一个成功的微服务架构之旅，包括你的软件开发组织多个人的观点。虽然交
     * 付一个完整的应用程序需要更多的技术人员，但这里相信成功的微服务开发基础从三个关键角色的视角开始：
     * （1）架极师：架构师的工作就是从顶层视图，了解应用程序如何可以被分解成单独的微服务和微服务如何互动，并
     * 提供一个解决方案。
     * （2）软件开发人员：软件开发人员编写代码和详细理解用于提供微服务的开发语言和开发框架。
     * （3）运维工程师:运维工程师带来如何部署和管理不仅仅生产，而且所有的非生产环境的智慧能力。运维工程师的
     * 目标是在每一个环境的一致性和可重复性。
     *
     * 在这里，将演示如何从每一个角色的角度使用 Spring Boot 和 Java 设计和构建一套微服务，最后，你将有一个
     * 可以打包并部署到云上的服务。
     */
    public static void main(String[] args) {

    }

}
