package com.siwuxie095.spring.cloud.chapter4th.example2nd;

/**
 * @author Jiajing Li
 * @date 2021-05-30 15:05:06
 */
public class Main {

    /**
     * 服务在哪里
     *
     * 每当有一个调用资源跨越多个服务器的应用程序时，它需要定位这些资源的物理位置。在非云世界中，
     * 这种服务位置解析通常通过 DNS 和网络负载均衡器的组合来解决。过程如下：
     * （1）应用程序使用通用 DNS 和特定服务的路径来调用服务。
     * （2）负载均衡器定位承载服务的服务器的物理地址。
     * （3）服务被部署到运行在持久服务器的应用程序容器。
     * （4）如有必要则在主负载均衡器基础上进行次级负载均衡器检查。
     *
     * 应用程序需要调用位于组织另一部分的服务。它试图使用通用 DNS 名称伴随唯一表示应用程序试图
     * 调用的服务的路径调用服务。DNS 名称解析为一个商业的负载均衡器，如流行的 F5 负载平衡器或
     * 一个开源的负载均衡器如 HAProxy。
     *
     * PS：
     * （1）F5：https://www.f5.com/
     * （2）HAProxy：https://www.haproxy.com/
     *
     * 负载均衡器在接收来自服务消费者的请求后，根据用户试图访问的路径定位路由表中的物理地址条目。
     * 此路由表项包含一个或多个承载该服务的服务器的列表。然后，负载均衡器选择列表中的一个服务器，
     * 并将请求转发到该服务器。
     *
     * 服务的每个实例部署到一个或多个应用服务器。
     *
     * 这些应用程序服务器的数量往往是静态的（例如，应用程序服务器托管服务的数量没有上升和下降）
     * 和持久的（例如，如果一个运行在应用程序服务器的服务崩溃，它将恢复到崩溃时相同的状态，和
     * 之前同一 IP 和配置）。
     *
     * 为了实现高可用性，次级负载平衡器被设置成空闲的和 Ping 主要负载均衡器看它是否活着。如果
     * 它不存在，则次级负载均衡器变得活跃，接管主负载均衡器的 IP 地址和开始为请求提供服务。
     *
     * 虽然这种类型的模型适用于运行在企业数据中心的应用程序，并且在一组静态服务器上运行的服务
     * 数量相对较少，它不能很好的在基于云的微服务应用程序下工作。原因包括：
     * （1）单点故障：虽然负载均衡器可以高度可用，但它是整个基础设施的单点故障。如果负载均衡器
     * 处理能力下降，依赖它的所有应用程序也会下降。尽管你可以使一个负载均衡器高可用，但是负载
     * 均衡器会在你的应用程序基础设施集中阻塞点而成为瓶颈。
     * （2）有限的水平可伸缩性：通过将你的服务集成到一个单一的负载均衡集群，你获得跨越多个服务
     * 器负载均衡基础设施有限的水平扩展能力。许多商业负载均衡器由两件事情约束：冗余模型和许可
     * 证费用。大多数商业负载均衡器使用冗余的热交换模型，所以你只有一个单一的服务器来处理负载，
     * 而次级负载均衡器只有在主负载均衡器宕机的情况下才投入使用。本质上，你受制于硬件。其次，
     * 商业负载均衡器也有严格的许可模式，面向固定的容量而不是一个可变的模型。
     * （3）静态管理：最传统的负载均衡器不是被设计为快速注册和注销服务的。它们使用集中的数据库
     * 来存储规则的路由，而添加新路由的唯一途径通常是通过供应商专有的 API。
     * （4）复杂：因为负载均衡器充当服务的代理，所以服务消费者请求必须将它们的请求映射到物理服
     * 务。这个解析层经常给你的服务基础设施增加一层复杂性，因为服务的映射规则必须手工定义和部署。
     * 在传统的负载均衡器场景中，新服务实例的注册是手工完成的，而不是在新服务实例启动时进行的。
     *
     * 这四个原因，不是对一般的负载均衡器的控诉。它们在企业环境中工作得很好，大多数应用程序的大
     * 小和规模可以通过集中式网络基础设施处理。此外，负载均衡器仍然有在集中的 SSL 卸载和管理服
     * 务端口安全方面发挥作用。负载均衡器可以锁定入站（入口）和出站（出口）端口访问所有在它后面
     * 的服务器。在满足行业标准认证要求，如 PCI（支付卡行业）的合规性时，这种最少网络访问的概
     * 念通常是一个关键的组成部分。
     *
     * 然而，在云中需要处理大量交易和冗余，集中式的网络基础设施最终不能正常工作，因为它没有有效
     * 地伸缩，也没有成本效益。后续将介绍如何为基于云的应用程序实现健壮的服务发现机制。
     */
    public static void main(String[] args) {

    }

}
