package com.siwuxie095.spring.cloud.chapter4th.example1st;

/**
 * @author Jiajing Li
 * @date 2021-05-30 10:44:00
 */
public class Main {

    /**
     * 服务发现
     *
     * 在任何分布式架构中，都需要找到机器所在位置的物理地址。自从分布式计算开始以来，这个概念就一直存在，
     * 并被正式地称为服务发现。服务发现可以像维护应用程序所使用的所有进程服务的地址的属性文件一样简单，
     * 或者作为形式化（和复杂化）的一个 UDDI（通用描述、发现和集成）存储库。
     *
     * PS：UDDI 即 Universal Description，Discovery，and Integration。
     *
     * 服务发现对基于云的微服务应用是极重要的，这有两个原因。首先，它为应用程序团队提供了快速地在环境中
     * 运行的服务实例数量按比例增加和减少的水平扩展能力。服务消费者通过服务发现从服务的物理位置抽离出来。
     * 由于服务消费者不知道实际服务实例的物理位置，所以可以从可用服务池中添加或删除新的服务实例。
     *
     * 这种快速扩展服务而不中断服务消费者的访问的能力是一个非常强大的概念，因为它将用于一个开发团队以构
     * 建整体的、单租户（例如，一个客户）的应用，使其不再只考虑通过添加更大、更好的硬件（垂直扩展）到通
     * 过添加更多的服务器（横向扩展）的更强大的方法。
     *
     * 一个整体的方法通常是驱动开发团队走上超出他们容量需要的道路。容量以块状和尖峰的形式增加，很少是平
     * 稳的路径。微服务可以扩展/缩小新服务实例。服务发现帮助抽象出这些部署，使之远离服务消费者。
     *
     * 服务发现的第二个好处是它有助于增加应用程序的弹性。当微服务实例变得不健康或不可用，大多数服务发现
     * 引擎将从其内部可用服务列表中删除该实例。由于服务发现引擎将路由绕过不可用的服务，所以有问题的服务
     * 造成的损害将最小化。
     *
     * 这里已经了解了服务发现的好处，但是有什么大不了的呢？毕竟，难道不能使用诸如 DNS（域名服务）或负载
     * 均衡器之类的经过检验而可靠的方法来帮住服务发现吗？后续将讨论为什么它们不会与微服务应用一起工作，
     * 特别是在云计算环境中运行的微服务。
     */
    public static void main(String[] args) {

    }

}
