package com.siwuxie095.spring.cloud.chapter5th.example3rd;

/**
 * @author Jiajing Li
 * @date 2021-06-02 21:36:38
 */
public class Main {

    /**
     * 客户端弹性的重要性
     *
     * 之前已经在抽象中讨论了四种客户端弹性模式，下面深入研究一个更具体的例子，说明这些模式可以应用于何处。
     * 通过一个常见的场景，遇到和看到为什么客户端弹性模式如断路器模式是实现一个基于服务的体系结构的关键，
     * 特别是在云上运行的微服务架构。
     *
     * 在这个典型的场景中，涉及到使用远程资源，比如数据库和远程服务：有三个应用程序以三种不同的服务以某种
     * 方式进行通信。应用 A 和 B 直接与服务 A 通信。服务 A 从数据库检索数据并调用服务 B 来为它工作。服
     * 务 B 从一个完全不同的数据库平台检索数据，并从第三方云提供商那里调用另一个服务 C，其服务严重依赖于
     * 内部网络区域存储（NAS）设备，将数据写入共享文件系统。此外，应用 C 直接调用服务 C。
     *
     * 上周末，网络管理员对 NAS 上的配置做了一个小小的调整，这种变化似乎工作得很好，但在星期一早上，任何
     * 对特定磁盘子系统的读取都开始非常缓慢地执行。
     *
     * 编写服务 B 的开发者从来没有预料到调用服务 C 会运行缓慢。他们编写代码，以便在同一事务中对数据库和
     * 服务的读写。当服务 C 开始运行缓慢，不仅要求服务 C 启动备份线程池，在服务容器的连接池的数据库连接
     * 数也会枯竭，因为服务 C 的调用从未完成，这些连接已经被打开了。
     *
     * 最后，服务 A 开始耗尽资源，因为它调用了服务 B，因为服务 C 运行得很慢。最终，所有三个应用程序都停
     * 止响应，因为它们在等待请求完成时耗尽了资源。
     *
     * PS：应用程序是一个相互依赖的关系图。如果不管理它们之间的远程调用，那么一个行为不好的远程资源就可
     * 以搞垮其中的所有服务。
     *
     * 如果在一个分布式资源被调用（无论是对数据库的调用还是对服务的调用）的每个点上实现了一个断路器模式，
     * 那么可以避免整个场景。如果对服务 C 的调用是用一个断路器来实现的，那么当服务 C 开始表现不佳时，对
     * 服务 C 的特定调用的断路器将在不消耗线程的情况下被快速地中断和失败。如果服务 B 有多个端点，那么只
     * 有与服务 C 的特定调用交互的端点才会受到影响。服务 B 其余部分的功能仍然是完整的，能满足用户的要求。
     *
     * 断路器在应用程序和远程服务之间充当中间人。在前面的场景中，断路器实现可以保护应用程序 A、B 和 C
     * 不完全崩溃。
     *
     * 在使用断路器时，服务 B（客户端）永远不会直接调用服务 C。相反，当调用时，服务 B 将服务的实际调用
     * 委托给断路器，它将调用并将其包装在一个线程中（通常由线程池管理）， 该线程独立于原始调用方。通过
     * 将调用包装在一个线程中，客户端不再直接等待调用完成。相反，断路器正在监视线程，如果线程运行时间过
     * 长，则可以终止调用。
     *
     * 在使用断路器时，有三种场景：第一种是完全通畅的场景，断路器将维护一个计时器，如果对远程服务的调用
     * 在计时器耗尽之前完成，一切都很好，服务 B 可以继续工作。第二种是部分降级的场景，服务 B 将通过断路
     * 器调用服务 C。不过，这一次，服务 C 运行得很慢，如果断路器上的定时器超时，断路器将无法完成远程服
     * 务的连接。服务 B 将在调用时出错，但服务 B 不会占用资源（也就是它自己的线程或连接池）等待服务 C
     * 完成。如果通过断路器对服务 C 的调用超时，断路器将开始跟踪发生故障的次数。第三种是快速失败的场景，
     * 如果在某个时间段内发生了足够多的错误，那么断路器将 "跳闸"，所有对服务 C 的调用都将在不调用服务
     * C 的情况下失败。
     *
     * 断路器跳闸允许三件事情发生：
     * （1）服务 B 现在立即知道有问题，而不必等待断路器超时。
     * （2）服务 B 现在可以选择要么完全失败，要么使用另一组代码（回退）采取行动。
     * （3）服务 C 将有机会恢复，因为当断路器已经跳闸的时候服务 B 没有调用它。这允许服务 C 有喘息空间，
     * 并帮助防止当服务降级发生时发生的级联崩溃。
     *
     * 最后，断路器偶尔会让调用通过降级的服务，如果这些调用成功连续次数足够，断路器将自动复位。
     *
     * 断路器模式关键是提供远程调用的能力：
     * （1）快速失败：当远程服务正在经历降级时，应用程序将快速失败，并通常关闭整个应用程序阻止资源耗尽。
     * 在大多数停电情况下，最好是部分停机，而不是完全停机。
     * （2）优雅的失败：通过超时和快速失败，断路器模式使应用程序开发人员能够优雅地失败，或者寻求替代机制
     * 来实现用户的意图。例如，如果用户试图从一个数据源检索数据，并且数据源正在经历服务降级，那么应用程
     * 序开发人员可以尝试从另一个位置检索该数据。
     * （3）无缝恢复：断路器模式作为中介，断路器可以周期性地检查所请求的资源是否已恢复在线，并在没有人工
     * 干预的情况下重新启用所需的资源。
     *
     * 在一个有数以百计服务的大型基于云服务的应用上，这个优雅的恢复是至关重要的，因为它可以减少需要恢复服
     * 务的时间，显著减轻了操作员或应用工程师在服务的恢复时通过直接干预造成更大的风险问题（重新启动失败的
     * 服务）。
     */
    public static void main(String[] args) {

    }

}
