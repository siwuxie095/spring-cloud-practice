package com.siwuxie095.spring.cloud.chapter5th.example11th;

/**
 * @author Jiajing Li
 * @date 2021-06-06 17:56:59
 */
public class Main {

    /**
     * 小结
     *
     * （1）当设计高度分布式的应用如微服务应用，必须考虑客户端的弹性。
     * （2）服务的彻底失败（例如，服务器崩溃）很容易检测和处理。
     * （3）单个性能较差的服务可能会触发资源耗尽的级联效应，因为调用客户端中的线程被阻塞，
     * 等待服务完成。
     * （4）三种核心客户端弹性模式是断路器模式、回退模式和舱壁模式。
     * （5）断路器模式试图杀死运行缓慢和退化的系统调用，调用快速失败，防止资源枯竭。
     * （6）回退模式允许开发人员在远程服务调用失败或调用的断路器失败时定义替代代码路径。
     * （7）主体头模式将远程资源调用彼此远离，将远程服务的调用隔离在自己的线程池。如果一
     * 组服务调用失败，不允许它的失败吞噬应用程序容器中的所有资源。
     * （8）Spring Cloud 和 Netflix Hystrix 库提供了断路器、回退和舱壁模式的实现。
     * （9）Hystrix库是高度可配置的，可以在全局、类和线程池级别设置。
     * （10）Hystrix 支持两种隔离模式：线程和信号量。
     * （11）Hystrix 的默认隔离模式：线程，完全隔离了一个受 Hystrix 保护的调用，但不
     * 会将父线程的上下文传播到受 Hystrix 管理的线程。
     * （12）Hystrix 的另一个隔离模式：信号量，不使用单独的线程迕行一个 Hystrix 调用。
     * 虽然这是更有效的，这也暴露出如果 Hystrix 中断调用，服务不可预知的行为。
     * （13）Hystrix 允许通过自定义 HystrixConcurrencyStrategy 实现，将父线程上下
     * 文注入到一个受 Hystrix 管理的线程中。
     */
    public static void main(String[] args) {

    }

}
