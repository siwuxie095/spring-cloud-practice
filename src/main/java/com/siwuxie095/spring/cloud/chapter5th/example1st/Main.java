package com.siwuxie095.spring.cloud.chapter5th.example1st;

/**
 * @author Jiajing Li
 * @date 2021-06-01 07:56:55
 */
public class Main {

    /**
     * 坏事发生时：使用 Spring Cloud 和 Netflix Hystrix 的客户端弹性模式
     *
     * 所有系统，特别是分布式系统，都会经历失败。如何构建应用程序以应对失败，这是每个软件开发人员工作的
     * 一个关键部分。然而，当涉及到构建弹性系统时，大多数软件工程师只考虑到一个基础设施或关键服务的完全
     * 失败。他们着重于使用集群服务器、负载均衡、以及将基础设施分成多个位置等技术，将冗余构建到应用程序
     * 的每一层。
     *
     * 虽然这些方法考虑到系统组件的完整（通常是惊人的）损失，但它们只解决了构建弹性系统的一小部分。当一
     * 个服务崩溃时，很容易发现它已经不在了，应用程序可以绕过它。然而，当一个服务运行得很慢时，发现它的
     * 性能较差，并且绕过它是非常困难的，因为：
     * （1） 服务的恶化可以断断续续的开始并有扩大的势头：恶化可能只在小范围内爆发。失败的第一个迹象可能
     * 是一小群用户抱怨一个问题，直到突然应用程序容器耗尽线程池并完全崩溃。
     * （2）对远程服务的调用通常是同步的，并且不会缩短长时间调用：服务的调用方没有超时的概念，以使服务
     * 调用永远中断。应用程序开发人员调用服务执行一个操作并等待服务返回。
     * （3）应用程序经常被设计来处理远程资源的完全失败，而不是局部恶化：通常，只要服务没有完全失败，应
     * 用程序将继续调用服务，并且不会快速失败。应用程序将继续调用行为不良的服务。调用应用程序或服务可能
     * 会因资源耗尽而优雅降级，或者更可能崩溃。资源耗尽是指有限的资源，如线程池和数据库连接超出最大连接
     * 数和调用客户端必须等待资源可用。
     *
     * 由于远程服务性能不佳所造成的问题是隐藏的，它们不仅难以检测，而且可能触发连锁反应，从而波及整个应
     * 用程序生态系统。如果没有保障措施，单个性能较差的服务可以很快地影响到多个应用程序。基于云，基于微
     * 服务的应用特别容易受到这些类型的冲击，因为这些应用程序由大量的细粒度分布式服务组成，其中包含了完
     * 成用户交易的不同基础设施。
     */
    public static void main(String[] args) {

    }

}
