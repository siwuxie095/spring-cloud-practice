package com.siwuxie095.spring.cloud.chapter5th.example2nd;

/**
 * @author Jiajing Li
 * @date 2021-06-01 08:14:59
 */
public class Main {

    /**
     * 客户端的弹性模式
     *
     * 客户端的弹性软件模式都集中在当远程资源失败时从崩溃中保护远程资源的（另一个微服务调用或数据库查找）客户端，
     * 因为远程服务抛出错误或表现不佳。这些模式的目标是允许客户端（快速失败），不消耗宝贵的资源，如数据库连接和
     * 线程池，以及防止远程服务向客户端的消费者传播 "上游" 的问题。
     *
     * 有四种客户端弹性模式：
     * （1）客户端负载均衡
     * （2）断路器
     * （3）回退
     * （4）舱壁
     *
     * 四个客户端弹性模式充当服务消费者和服务之间的保护缓冲区。如下：
     * （1）服务的客户端缓存微服务从服务发现取回的端点。
     * （2）断路器模式确保服务客户端不重复调用失败的服务。
     * （3）当调用失败时，回退询问是否有可执行的替代方案。
     * （4）舱壁将服务客户端不同服务调用隔离来确保不良行为服务不使用客户端上的所有资源。
     * （5）每个微服务实例使用它自己的 IP 运行在自己的服务器。
     *
     * 这些模式是在客户端中调用远程资源实现的。这些模式的实现逻辑位于客户端消费的远程资源和资源本身之间。
     *
     *
     *
     * 1、客户端负载均衡
     *
     * 之前在讨论服务发现时介绍了客户端负载均衡模式。客户端负载均衡包括让客户端从服务发现代理（如 Netflix
     * Eureka）查找所有服务的单独实例，然后缓存所述服务实例的物理位置。每当服务消费者需要调用该服务实例时，
     * 客户端负载均衡器将从它维护的服务池中返回一个位置。
     *
     * 由亍客户端负载均衡器位于服务客户端和服务消费者之间，因此负载均衡器可以检测服务实例是否抛出错误或表现
     * 不佳。如果客户端负载均衡器检测到问题，它可以从可用服务位置池中删除该服务实例，并防止后续的服务调用命
     * 中该服务实例。
     *
     * 这正是 Netflix 的 Ribbon 库在没有额外配置的情况下提供的行为。
     *
     *
     *
     * 2、断路器
     *
     * 断路器模式是在电路断路器之后模型化的客户端弹性模式。在电气系统中，断路器会检测流过导线的电流是否过大。
     * 如果断路器检测到问题，它将中断与电气系统其余部分的连接，并使下游部件不被烧毁。
     *
     * 有了一个软件断路器，当一个远程服务被调用时，断路器将监听调用。如果调用需要花费很长时间，断路器将调解
     * 和终止调用。此外，断路器将监视对远程资源的所有调用，如果有足够多的调用失败，断路实现将启用，快速失败，
     * 并防止对失效的远程资源的后续调用。
     *
     *
     *
     * 3、回退处理
     *
     * 在回退模式下，当远程服务调用失败时，服务消费者将执行另一个代码路径，并尝试通过另一种方式执行一个操作，
     * 而不是生成一个异常。这通常包括查找来自另一个数据源的数据或排队用户后续处理的请求。用户的调用不会显示
     * 说明问题的异常，但可能会通知他们的请求必须在以后完成。
     *
     * 例如，假设你有一个电子商务网站，监控用户的行为，并试着给他们一些他们可以购买的物品的建议。通常情况下，
     * 你可能会调用一个微服务来运行一个用户过去的行为分析和返回一个针对特定用户建议的列表。但是，如果首选项
     * 服务失败，你的回退可能是检索基于所有用户购买的更一般的首选项列表，并且更为通用。这些数据可能来自完全
     * 不同的服务和数据源。
     *
     *
     *
     * 4、舱壁
     *
     * 舱壁模式是基于造船的概念的。关于舱壁的设计，船舶被分为完全隔离和密封的舱叫舱壁。即使船体被击穿，因为
     * 船被分隔为密封舱（舱壁），舱壁将保持水局限于击穿发生的地方和防止整个船装满了水而沉没。
     *
     * 同样的概念也可以应用于必须与多个远程资源交互的服务。通过使用舱壁模式，你可以在自己的线程池中中断对远
     * 程资源的调用，并减少使用一个缓慢的远程资源调用会降低整个应用程序的风险。线程池为你服务的舱壁。每个远
     * 程资源被隔离并分配给线程池。如果一个服务响应缓慢，这种类型的服务调用的线程池将变得饱和，停止处理请求。
     * 对其他服务的服务调用不会被饱和，因为它们被分配给其他线程池。
     */
    public static void main(String[] args) {

    }

}
