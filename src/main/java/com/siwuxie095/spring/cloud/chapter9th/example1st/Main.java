package com.siwuxie095.spring.cloud.chapter9th.example1st;

/**
 * @author Jiajing Li
 * @date 2021-06-23 07:41:12
 */
public class Main {

    /**
     * 使用 Spring Cloud Sleuth 和 Zipkin 进行分布式跟踪
     *
     * 微服务架构是一种强大的设计范型，可以将复杂的单体软件系统分解为更小、更易于管理的部分。这些可管理的部分可以
     * 独立构建和部署。然而，这种灵活性是要付出代价的，那就是复杂性。因为微服务本质上是分布式的，所以要调试问题出
     * 现的地方可能会让人抓狂。服务的分布式特性意味着必须在多个服务、物理机器和不同的数据存储之间跟踪一个或多个事
     * 务，然后试图拼凑出究竟发生了什么。
     *
     * 这里列出了可能实现分布式调试的几种技术，并将关注以下内容。
     * （1）使用关联 ID 将跨多个服务的事务链接在一起。
     * （2）将来自多个服务的日志数据聚合为一个可搜索的源。
     * （3）可视化跨多个服务的用户事务流，并理解事务每个部分的性能特征。
     *
     * 为了完成这三件事，将使用以下三种不同的技术。
     * （1）Spring Cloud Sleuth：Spring Cloud Sleuth 是一个 Spring Cloud 项目，它将关联 ID 装备到 HTTP
     * 调用上，并将生成的跟踪数据提供给 OpenZipkin 的钩子。Spring Cloud Sleuth 通过添加过滤器并与其他 Spring
     * 组件进行交互，将生成的关联 ID 传递到所有系统调用。
     * （2）Papertrail：Papertrail 是一种基于云的服务（基于免费增值），允许开发人员将来自多个源的日志数据聚合
     * 到单个可搜索的数据库中。开发人员可以为日志聚合选择的解决方案包括内部部署解决方案、基于云解决方案、开源解决
     * 方案和商业解决方案。后续将介绍几种备选方案。
     * （3）Zipkin：Zipkin 是一种开源数据可视化工具，可以显示跨多个服务的事务流。Zipkin 允许开发人员将事务分解
     * 到它的组件块中，并可视化地识别可能存在性能热点的位置。
     */
    public static void main(String[] args) {

    }

}
