package com.siwuxie095.spring.cloud.chapter8th.example1st;

/**
 * @author Jiajing Li
 * @date 2021-06-18 23:23:53
 */
public class Main {

    /**
     * Spring Cloud Stream 的事件驱动架构
     *
     * 你最后一次和别人坐下来聊天是什么时候？回想一下你是如何和那个人交往的。它是一个完全集中的信息交换，你说了什么，
     * 然后没有做任何其他的，而你等待别人作出充分回应？当你说话的时候，你是否完全专注于谈话，不让外界的任何事物干扰
     * 你？
     *
     * 现实是人类不断地处于运动状态，与周围的环境相互作用，同时从周围的事物中发出和接收信息。在家里，典型的谈话可能
     * 是这样的。你正忙着洗盘子，一边和妻子谈话。你告诉她你的一天。她看着她的电话，她听了，处理我所说的，偶尔回应着。
     * 你正在洗碗时，听到隔壁房间一阵骚动。你停止你正在做的事情，冲到隔壁房间里找出什么不对，看到了你们九个月大的小
     * 狗，Vader，刁着你三岁的儿子的鞋，并像战利品一样沿着客厅携带着鞋。你三岁大的儿子不高兴了。你穿过房子，追着狗
     * 直到你把鞋子弄回来。然后你回去继续洗盘子，和妻子聊天。
     *
     * 这里谈到这样一个场景并不是要告诉你们在生命中的一个典型的日子，而是指出人们与世界的互动不是同步的、线性的、狭
     * 义地定义为一个请求响应模型。它是消息驱动的，在那里人们不断地发送和接收消息。当人们收到消息时，会对这些信息作
     * 出反应，同时常常中断正在进行的主要任务。
     *
     * 这里是关于如何设计和实现基于 Spring 的微服务，使用异步消息与其它微服务通信。在应用程序之间使用异步消息进行
     * 通讯不是新的。新的概念是使用消息来传递表示状态变化的事件。这个概念称为事件驱动架构（EDA）。它也称为消息驱动
     * 架构（MDA）。基于 EDA 的方法允许你构建高度解耦的系统，可以在不紧密耦合到特定库或服务的情况下对更改作出反应。
     * 当微服务组合起来，EDA 允许你通过仅仅具有服务监听的一系列由你的应用程序发出的事件（消息），来快速添加新的功
     * 能到你的应用程序。
     *
     * Spring Cloud 项目使得通过 Spring Cloud Stream 子项目构建基于消息的解决方案变得微不足道。Spring Cloud
     * Stream 允许你轻松地实现消息发布和消费，同时保护你的服务免受与底层消息传递平台相关的实现细节的影响。
     */
    public static void main(String[] args) {

    }

}
