package com.siwuxie095.spring.cloud.chapter3th.example1st;

/**
 * @author Jiajing Li
 * @date 2021-05-23 23:17:45
 */
public class Main {

    /**
     * 使用 Spring Cloud 配置服务器控制配置
     *
     * 在某种程度上来说，开发人员是被迫将配置信息与他们的代码分开的。毕竟，自上学以来，他们就一直被灌输不要将硬编码
     * 带入应用程序代码中的观念。许多开发人员在应用程序中使用一个常量类文件来帮助将所有配置集中在一个地方。将应用程
     * 序配置数据直接写入代码中通常是有问题的，因为每次对配置进行更改时，应用程序都必须重新编译和重新部署。为了避免
     * 这种情况，开发人员会将配置信息与应用程序代码完全分离。这样就可以很容易地在不进行重新编译的情况下对配置进行更
     * 改，但这样做也会引入复杂性，因为现在存在另一个需要与应用程序一起管理和部署的制品。
     *
     * 许多开发人员转向低层级的属性文件（即 YAML、JSON 或 XML）来存储他们的配置信息。这份属性文件存放在服务器上，
     * 通常包含数据库和中间件连接信息，以及驱动应用程序行为的相关元数据。将应用程序分离到一个属性文件中是很简单的，
     * 除了将配置文件放在源代码控制下（如果需要这样做的话），并将配置文件部署为应用程序的一部分，大多数开发人员永
     * 远不会再对应用程序配置进行实施。
     *
     * 这种方法可能适用于少量的应用程序，但是在处理可能包含数百个微服务的基于云的应用程序，其中每个微服务可能会运行
     * 多个服务实例时，它会迅速崩溃。
     *
     * 配置管理突然间变成一件重大的事情，因为在基于云的环境中，应用程序和运维团队必须与配置文件的 "鼠巢" 进行斗争。
     * 基于云的微服务开发强调以下几点。
     * （1）应用程序的配置与正在部署的实际代码完全分离。
     * （2）构建服务器、应用程序以及一个不可变的镜像，它们在各环境中进行提升时永远不会发生变化。
     * （3）在服务器启动时通过环境变量注入应用程序配置信息，或者在微服务启动时通过集中式存储库读取应用程序配置信息。
     *
     * 这里将介绍在基于云的微服务应用程序中管理应用程序配置数据所需的核心原则和模式。
     */
    public static void main(String[] args) {

    }

}
