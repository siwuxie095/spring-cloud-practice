package com.siwuxie095.spring.cloud.chapter3th.example1st;

/**
 * @author Jiajing Li
 * @date 2021-05-23 23:17:45
 */
public class Main {

    /**
     * 使用 Spring Cloud Configuration Server 控制配置
     *
     * 在某种程度上，开发人员将被迫从代码中分离配置信息。毕竟，从学校开始，他们就不应该硬编码代码到
     * 应用程序代码中。许多开发人员在其应用程序中使用常量类文件，以帮助将所有配置集中在一个地方。应
     * 用程序配置数据直接被写入代码的问题往往是因为每次更改配置了应用程序必须重新编译或重新部署。为
     * 了避免这种情况，开发人员将配置信息从应用程序代码中完全分离出来。这使得它易于更改配置无需经过
     * 重新编译的过程，同时也引入了复杂性，因为你现在有了另一个构件，它需要应用程序管理和部署。
     *
     * 许多开发人员将转向使用低性能文件（或 YAML、JSON、XML）来存储配置信息。此属性文件将放在服务
     * 器上，该服务器通常包含数据库和中间件连接信息和应用程序元数据，这些元数据将驱动应用程序的行为。
     * 分离你的应用程序在一个属性文件是容易的，大多数开发人员不会对应用程序配置做任何更多的操作，然
     * 后把配置文件放置在源代码管理（如果这样），它将作为应用程序的一部分部署。
     *
     * 这种方法可以在只有少量的应用程序下工作，当处理基于云的应用程序可能包含数百个微服务，而且每个
     * 微服务可能有多个运行时服务实例，就会很快分崩离析。
     *
     * 突然，配置管理成了一个大问题，因为云环境中的应用程序和运维团队必须全力应付配置文件到哪去。基
     * 于云的微服务开发强调：
     * （1）将应用程序的配置完全从正在部署的实际代码分离。
     * （2）创建服务器和应用程序以及一个不可变的镜像，它在你的环境被升级时不会改变。
     * （3）将任何应用程序配置信息在服务器启动时通过环境变量注入或在启动时应用程序的微服务从一个中
     * 央从库读取。
     *
     * 这里将向你介终管理一个基于云的微服务应用程序的应用配置数据的核心原则和模式。
     */
    public static void main(String[] args) {

    }

}
