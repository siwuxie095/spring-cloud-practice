package com.siwuxie095.spring.cloud.chapter7th.example6th;

/**
 * @author Jiajing Li
 * @date 2021-06-17 21:38:01
 */
public class Main {

    /**
     * 关于微服务安全的思考
     *
     * 这里向你介绍了 OAuth2 规范和如何使用 Spring Cloud Security 来实现 OAuth2 认证服务，OAuth2 只是
     * 微服务安全难题的一部分。当你为生产使用构建微服务，你应该围绕下列做法建立你的微服务安全：
     * （1）所有服务通信使用 HTTPS 安全套接字层（SSL）。
     * （2）所有的服务调用都要经过 API 网关。
     * （3）将你的服务划分为公共 API 和私有 API。
     * （4）通过锁定不需要的网络端口限制你的微服务攻击面。
     *
     *
     *
     * 1、所有服务通信使用 HTTPS 安全套接字层（SSL）
     *
     * 在这里的所有代码示例中，你一直在使用 HTTP，因为 HTTP 是一个简单的协议，在你开始使用服务之前不需要对每个
     * 服务进行设置。
     *
     * 在生产环境中，你的微服务只能通过 HTTPS 和 SSL 加密通道进行通信。HTTPS 的配置和设置可以通过你的 DevOps
     * 脚本自动化完成。
     *
     * 注意：如果你的应用程序需要满足信用卡支付的支付卡行业（PCI）的遵从性，你将需要为所有的服务通信实现 HTTPS。
     * 尽早使用 HTTPS 构建你所有的服务，比你的应用和微服务在生产后做项目迁移更容易。
     *
     *
     *
     * 2、使用服务网关来访问你的微服务
     *
     * 单个服务器、服务端点和服务正在运行的端口不应该被客户端直接访问。相反，使用服务网关作为服务调用的入口点
     * 和看门人。配置网络层上的操作系统或运行微服务的容器只接受服务网关的流量。
     *
     * 记住，服务网关可以作为一个策略执行点（PEP），它可以针对所有服务执行。把服务调用通过服务网关，如 Zuul
     * 允许你如何保护和审计服务是一致的。服务网关还允许你锁定将要暴露给外部世界的端口和端点。
     *
     *
     *
     * 3、将你的服务划分为公共 API 和私有 API
     *
     * 一般性的安全是所有关于建立访问层和强制执行最小权限的概念。最小权限的概念，用户应该有最少的网络访问和权
     * 限来做他们的日常工作。为此，你应该将你的服务分为两个不同的作用域来实现最小权限：public 和 private。
     *
     * 公共区域包含客户端将使用的公共 API（EagleEye 应用程序）。公共 API 微服务应该进行面向工作流的有限任务。
     * 公共 API 微服务往往是为集成商提供服务，跨多个服务拉取数据和执行任务。
     *
     * 公共微服务应该在自己的服务网关之后，并有自己的认证服务来进行 OAuth2 身份验证。客户端应用程序访问公共
     * 服务时应该经过由服务网关保护的单个路由。此外，公共区域应该有自己的认证服务。
     *
     * 私有区域作为一堵墙来保护你的核心应用程序的功能和数据。只有通过一个众所周知并且应该被锁定的端口才能访问
     * 私有区域，只接受来自私有服务正在运行的网络子网的网络通信流量。私有区域应该有自己的服务网关和认证服务。
     * 公共 API 服务应该对私有区域认证服务进行身份验证。所有应用程序数据至少应该位于私有区域的网络子网中，只
     * 能由驻留在私有区域的微服务访问。
     *
     *
     * PS：私有 API 网络区域应该如何锁定？
     *
     * 许多组织采取的方法是，他们的安全模型应该有一个硬的外部中心和较软的内表面。这意味着一旦事务是在内部的私
     * 有 API 区域，在私有区域服务之间的通信可以不加密（没有 HTTPS）和不需要的认证机制。大多数情况下，这是
     * 为了方便和开发速度而做的。安全性越高，调试问题就越难，增加了管理应用程序的整体复杂性。
     *
     * 这里倾向于偏执地看待这个世界。（因为在金融服务业工作了八年，所以偏执狂伴随着领域而来。）这里宁愿将增加
     * 复杂性（可以通过 DevOps 的脚本减轻）作为交换条件，执行所有在私有 API 区域使用 SSL 运行的、并被证运
     * 行在私有区域的认证服务验证的服务。问题是你必须问问自己，你有多愿意因为网络中断而看到你的组织出现在当地
     * 报纸的头版？
     *
     *
     *
     * 4、通过锁定不需要的网络端口限制你的微服务攻击面
     *
     * 许多开发人员并没有仔细检查他们需要打开的端口的绝对最小数量，以便它们的服务能够正常运行。配置你的服务
     * 正在运行的操作系统，只允许对服务或服务所需的基础设施（监视、日志聚合）所需的端口进行入站和出站访问。
     *
     * 不要只关注入站的访问端口。许多开发者忘记锁定他们的出站端口。锁定你的出站端口可以防止在服务本身已被攻
     * 击者攻破的事件中泄露了你的服务数据。另外，请确保查看访问公共和私有 API 区域的网络端口。
     */
    public static void main(String[] args) {

    }

}
