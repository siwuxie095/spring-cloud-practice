package com.siwuxie095.spring.cloud.chapter7th.example2nd;

/**
 * @author Jiajing Li
 * @date 2021-06-14 17:00:04
 */
public class Main {

    /**
     * 介绍 OAuth2
     *
     * OAuth2 是基于令牌的安全认证和授权框架，它将安全分成四个构成要素。这四个构成要素分别是：
     * （1）受保护的资源：你想保护的资源（在这里的例子中，即微服务），确保只有经过身份验证的用户拥有可以访问
     * 的适当授权。
     * （2）资源所有者：资源所有者定义什么应用程序可以调用他们的服务，允许那个用户访问服务，以及他们可以使用
     * 服务做什么。资源所有者注册的每个应用程序都将得到一个应用程序名称，该名称标识应用程序以及应用程序的密
     * 钥。应用程序的名称和密钥是凭证的一部分，它们在认证 OAuth2 令牌时被传输。
     * （3）应用程序：这是一个将代表用户调用服务的应用程序。毕竟，用户很少直接调用服务。相反，他们依靠应用程
     * 序为他们做工作。
     * （4）OAuth2 认证服务器：OAuth2 认证服务器是应用程序和被消费的服务之间的中介。OAuth2 服务器允许用户
     * 验证自己而不必传输他们的用户凭证到代表用户调用的应用程序的每个服务。
     *
     * 这四个构成要素交互作用来认证用户身份。用户只需出示他们的凭证。如果他们成功认证，则发出一个可从服务传递
     * 到服务的身份验证令牌。OAuth2 是基于令牌的安全框架。用户通过 OAuth2 服务器提供的应用程序凭证（它们用
     * 于访问资源）进行身份认证。如果用户的凭证是有效的，OAuth2 服务器提供一个令牌，该令牌在每一次服务被用户
     * 的应用程序试图访问受保护的资源（微服务）时可以被出示。
     *
     * 然后，受保护的资源可以与 OAuth2 服务器通信，来确定令牌的有效性和检索用户已被分配给他们的角色。角色被
     * 用于将相关用户分组在一起，并定义用户可以访问的资源。这里的目的，你要使用 OAuth2 和角色来定义服务端点
     * 和用户可以调用端点的什么 HTTP 谓词。
     *
     * Web 服务安全是一个极其复杂的问题。你要明白谁会调用你的服务（如企业网络中的内部用户、外部用户），他们
     * 是如何去调用你的服务（如内部 Web 客户端、移动设备、企业网络外的 Web 应用程序），他们使用你的代码将
     * 会采取什么动作。OAuth2 允许你在这些不同的情况下，通过不同的认证模式（称为授权），保护你的基于 REST
     * 的服务。OAuth2 规范有四种类型的授权：
     * （1）密码
     * （2）客户凭证
     * （3）授权码
     * （4）隐式
     *
     * 这里将不涉及这些权限授予类型中的每一种，也不为每个类型提供代码示例。那样的话，涵盖在这里的内容实在太多
     * 了。相反，这里会做以下事情：
     * （1）讨论你的微服务如何通过一个简单的 OAuth2 授权类型（密码授权类型）使用 OAuth2。
     * （2）使用 JavaScript Web Tokens 提供了更强大的 OAuth2 解决方案并建立 OAuth2 令牌信息编码标准。
     * （3）了解其他构建微服务需要考虑的安全注意事项。
     */
    public static void main(String[] args) {

    }

}
