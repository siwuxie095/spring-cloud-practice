package com.siwuxie095.spring.cloud.chapter7th.example1st;

/**
 * @author Jiajing Li
 * @date 2021-06-13 23:06:10
 */
public class Main {

    /**
     * 微服务安全
     *
     * 安全，提到这个词常常会引起听到它的开发者的不自觉的呻吟。你会听到他们低声抱怨，并在他们的呼吸下诅咒，
     * "它是迟钝的，难以理解，甚至更难调试。" 然而你找不到任何开发人员（除了那些没有经验的开发人员），说
     * 他们不担心安全。
     *
     * 一个安全的应用涉及多层次的保护，包括：
     * （1）确保适当的用户控制就位，以便你可以验证用户是他们所说的用户，并允许他们做他们想做的事情。
     * （2）保持服务的基础设施正在运行最新的补丁，以尽量减少漏洞的风险。
     * （3）实现网络访问控制，使服务只能通过定义良好的端口访问，并可访问少量授权服务器。
     *
     * 这里只讨论列表中的第一个要点：如何验证调用你的微服务的用户，他们说他们是谁，并确定它们是否是被授权
     * 向你的微服务发起它们的请求。另外两个主题是非常宽泛的安全主题，超出了这里的范围。
     *
     * 实现授权和认证控制，要用 Spring Cloud security 和 OAuth2（开放认证）标准来保护基于 Spring 的
     * 服务。OAuth2 是基于令牌的安全框架，允许用户使用第三方认证服务验证自己。如果用户成功认证，他们将提
     * 交一个令牌，该令牌必须与每个请求一起发送。然后可以将令牌返回给身份验证服务验证。OAuth2 背后的主要
     * 目标是当多个服务被调用来满足一个用户的请求，用户可以被每个服务认证而无需向每个处理他们请求的服务出
     * 示凭证。Spring Boot 和 Spring Cloud 都提供了 OAuth2 服务的开箱即用的实现，这使得将 OAuth2
     * security 整合到你的服务极其方便。
     *
     * 注意：在这里，将告诉你如何使用 OAuth2 保护你的微服务；然而，一个成熟的 OAuth2 实现还需要一个前端
     * Web 应用程序输入你的用户凭证。这里将不会讨论如何创建前端应用程序，因为超出了这里的范围。相反，这里
     * 将使用 REST 客户端，像 POSTMAN，来模拟凭证的呈现。
     *
     * OAuth2 背后真正的力量是它使应用程序开发人员能够轻松地与第三方云供应商集成，并使用这些服务进行用户
     * 认证和授权而不必向第三方服务不断地传输用户的凭证。云供应商， 如 Facebook、GitHub 和 Salesforce
     * 都支持 OAuth2 作为标准。
     */
    public static void main(String[] args) {

    }

}
